# Joao Marcelo Fantin Lerina \ Segurança de Sistemas : Trabalho 3 \ Riscando a superfície do HTTPS

''' casos de teste ; mensagens recebidas

in: E43B50CA555D9DFD4A78F66288A869DB837E6E29FC81108C7DD67100AA0A22A7D2F97F597DEF0DD02B26F61C07D9CB7EA6D9A2E64EFF091377B4A9A04AFA2271F5C725F8E3F41D931E88F71C42C0E301216C6DDA714B8EC0EA052D40951E881FC0B66337668E0C970846FB055D431166
→ Agora se conseguiu decifrar esta mensagem, inverte ela e me envia cifrada de volta

dumb response (antes de consertar padding): 2594eda626de8211ad5512507d9c22871004754225ab4dc5b8ae107c87f3d76bf12fe071f8b7cc4d7602a3d37cdb3ce822f97075c0dd460a72ea7ad23286b363017c571899bfeb0b94e09f62bf65e909e78b9fde0ba7e6331af053814ac3a69c9c2ee93ac10873f663d2efb52b1d259a581c69e3ec6775a933fdedb5f371562d
← \xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xab\xe2\x99\xabatlov ed adarfic aivne em e ale etrevni ,megasnem atse rarficed uiugesnoc es arogA

response: 4a12098517fa5842038bc4bfa439bfaaa1f7230e48fb98b09cc8bdcbc263983629e2f2093ae4fb6b2c2d0324d0faaa5d399a895c1759b7982e84ebd1e1a147b039a08c2f8d14ceb550a04b7e2bf046a5ea04e359ba16a7e3aac555e970393283745d536735276a8184423a30c5b8368f 
← atlov ed adarfic aivne em e ale etrevni ,megasnem atse rarficed uiugesnoc es arogA

in: 2A40A0D7C04F4ABB99B7E35C851BA826078A7F6745E75F18A7FA284ABAE3877EBF26458AF7EB75315BEE5C45050E8406A2961E1E5B5F34F0BFBDF50F5B98C83FEB86D3847A198B9FCD0686750AD8EC8C889A752BED39CA82B2CBEFA5349670A90B68431B1A1AB2310F3AB8DCE52591C7B6AC7ECC3B81ABD2A34F1002DAC0D923F0440EF5E971B1F8D41C6C7A533E94FA9CE92376519EED48F5E8ACE2D05DE9FBB312F353B215A25D16D397909AE16AB42C3768EB6951B538C82C4EF35F4AFDF6
→ Todo caso, eu consegui decifrar direitinho. Agora comenta bem o código, coloca este exemplo completo no início do código como comentário e submete no Moodle

in: 057419C1E29F11227D282D34D89293315BEB37E146E42D806FED2A7EFFD25BED
→ Bom dia.

'''

''' parâmetros ; operações

p = 'B10B8F96A080E01DDE92DE5EAE5D54EC52C99FBCFB06A3C69A6A9DCA52D23B616073E28675A23D189838EF1E2EE652C013ECB4AEA906112324975C3CD49B83BFACCBDD7D90C4BD7098488E9C219A73724EFFD6FAE5644738FAA31A4FF55BCCC0A151AF5F0DC8B4BD45BF37DF365C1A65E68CFDA76D4DA708DF1FB2BC2E4A4371'
  # prime number
g = 'A4D1CBD5C3FD34126765A442EFB99905F8104DD258AC507FD6406CFF14266D31266FEA1E5C41564B777E690F5504F213160217B4B01B886A5E91547F9E2749F4D7FBD7D3B9A92EE1909D0D2263F80A76A6A24C087A091F531DBF0A0169B6A28AD662A4D18E73AFA32D779D5918D08BC8858F4DCEF97C2A24855E6EEB22B3B2E5'
  # Zp* generator
a = 'BEBEA7010BC0DE32A3F3BCB63DDC'
  # my seed : secrets.token_hex(14)
A = '1266BEA920AF4BAF7C1CD3CBEDCC1E98FAFA8C0919016135FF07C8C5FB531D7515D208FA2A5940731721A0FF428FED8BD7674445041E118645B1883471ADABA4F412844C2B50397DC6F3FA8622E8F7BF29F2F418B1D4A47180F7ADAC8D05819A6A0B5BA2689446F26A375B8760EFAD622D8B9497409DD4953988D7FA0D67C88'
  # some prime in Zp* : g ** a % p
B = '2BC25D7712867A9A176A8FF2C09680EA9D35C81B221130B39C00282384598CE4452C1951A32242BA400527F9A76F55DB5B6A403E7A8FF2E2F17609131F889355257F639EFBA33E7981A06B26F811FA7A0CB39459F030025908AAF83C472FFEB4D388EA0826F6472C2B92848316A093D46700075E021C2E8F5AB80BD8DF73ECF8'
  # some prime in Zp* : g ** b % p
V = 47807861221079857946396628782043893701942708897912437051614110688503218127733950373696304388684771824880872768722689097358427489690413874359520479844289623477671810266542231737154718035802356879012892522941142260191057186344625830792012444951656255772300578668990976980894053321783344913771239313075599058832
  # DH key combination : B ** a % p
S = '4aa91131e6a58c0ebaa917d44409bd17'
  # DH shared key

'''

import utils

p = int('B10B8F96A080E01DDE92DE5EAE5D54EC52C99FBCFB06A3C69A6A9DCA52D23B616073E28675A23D189838EF1E2EE652C013ECB4AEA906112324975C3CD49B83BFACCBDD7D90C4BD7098488E9C219A73724EFFD6FAE5644738FAA31A4FF55BCCC0A151AF5F0DC8B4BD45BF37DF365C1A65E68CFDA76D4DA708DF1FB2BC2E4A4371',16)
g = int('A4D1CBD5C3FD34126765A442EFB99905F8104DD258AC507FD6406CFF14266D31266FEA1E5C41564B777E690F5504F213160217B4B01B886A5E91547F9E2749F4D7FBD7D3B9A92EE1909D0D2263F80A76A6A24C087A091F531DBF0A0169B6A28AD662A4D18E73AFA32D779D5918D08BC8858F4DCEF97C2A24855E6EEB22B3B2E5', 16)
a = int('BEBEA7010BC0DE32A3F3BCB63DDC', 16)
B = int('2BC25D7712867A9A176A8FF2C09680EA9D35C81B221130B39C00282384598CE4452C1951A32242BA400527F9A76F55DB5B6A403E7A8FF2E2F17609131F889355257F639EFBA33E7981A06B26F811FA7A0CB39459F030025908AAF83C472FFEB4D388EA0826F6472C2B92848316A093D46700075E021C2E8F5AB80BD8DF73ECF8', 16)
V = pow(B, a, p) 
S = '4aa91131e6a58c0ebaa917d44409bd17'

msg = 'E43B50CA555D9DFD4A78F66288A869DB837E6E29FC81108C7DD67100AA0A22A7D2F97F597DEF0DD02B26F61C07D9CB7EA6D9A2E64EFF091377B4A9A04AFA2271F5C725F8E3F41D931E88F71C42C0E301216C6DDA714B8EC0EA052D40951E881FC0B66337668E0C970846FB055D431166'

if __name__ == "__main__":

  print("\nShared Secret\n", utils.genSecret(V).hex())

  clear_text = utils.decrypt(msg, S)
  print("\nMSG:\n", clear_text)

  response = utils.encrypt(utils.reverse(clear_text), S)
  print("\nREV+ENCRYPTED:\n", response, '\n')
